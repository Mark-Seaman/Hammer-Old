;; Emacs Configuration                                                          -*-lisp-*-
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)

(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))


;; uncomment this line to disable loading of "default.el" at startup
;(setq inhibit-default-init t)

;; enable visual feedback on selections
;(setq transient-mark-mode t)

;; uncomment for CJK utf-8 support for non-Asian users
; (require 'un-define)

;; default to better frame titles
(setq frame-title-format
      (concat  "%b - emacs@" (system-name)))

;; default to unified diffs
(setq diff-switches "-u")

;; always end a file with a newline
(setq require-final-newline 'query)


;;________________________________________________________________________________________
;; Running emacs
;;________________________________________________________________________________________

;; Run emacs server
;(server-start)

;; When loading files reuse existing frames.
(setq gnuserv-frame (car (frame-list)))

;; Maximize the window
(defun toggle-fullscreen (&optional f)
  (interactive)
  (let ((current-value (frame-parameter nil 'fullscreen)))
    (set-frame-parameter nil 'fullscreen
                         (if (equal 'fullboth current-value)
                             (if (boundp 'old-fullscreen) old-fullscreen nil)
                           (progn (setq old-fullscreen current-value)
                                  'fullboth)))))

(global-set-key [f11] 'toggle-fullscreen)

; Make new frames fullscreen by default. Note: this hook doesn't do
;anything to the initial frame if it's in your .emacs, since that file is
; read _after_ the initial frame is created.
(add-hook 'after-make-frame-functions 'toggle-fullscreen)
(run-with-idle-timer 0.1 nil 'toggle-fullscreen)

;; Don't make backup files
(setq vc-make-backup-files nil)

;; Don't confirm on close
(remove-hook 'kill-buffer-query-functions 'server-kill-buffer-query-function)

;; We dont't want a startup message
(setq-default inhibit-startup-message t)

;; Set the window size at startup
(setq initial-frame-alist `((left . 0) (top . 20) (width . 122) (height . 30)))

; Disable menu bar
(menu-bar-mode)

;;________________________________________________________________________________________
;; Tabs
;;________________________________________________________________________________________

; Add or remove space
(defun insert-space ()
   (interactive)  (insert "    ")) 
(defun space-over ()
   (interactive) (beginning-of-line) (insert "    ") (next-line) (beginning-of-line)) 
(defun space-back ()
   (interactive) (beginning-of-line) (delete-char 4) (next-line))

;; Define tabs
(setq-default indent-tabs-mode nil)
;(global-set-key "\C-x\t" 'indent-rigidly)
;(global-set-key (kbd "<backtab>") 'decrease-left-margin)
(global-set-key (kbd "C-.") 'space-over)
(global-set-key (kbd "C-,") 'space-back)
(global-set-key (kbd "C-<tab>") 'muse-next-reference)
;(global-set-key (kbd "<tab>")   'insert-space)
;(local-set-key  (kbd "<tab>")   'tab-to-tabstop)

;; Expand tabs to four spaces
(setq-default tab-width 4)
(setq-default tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100))
(add-hook 'shell-mode-hook (lambda() (setq tab-width 8))) 

;; Move line up
(defun move-line-up ()
  (interactive)
  (transpose-lines 1)
  (forward-line -2))

;; Move line down
(defun move-line-down ()
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1))

(global-set-key [(control shift up)]   'move-line-up)
(global-set-key [(control shift down)] 'move-line-down)

;;________________________________________________________________________________________
;; Buffers & Windows
;;________________________________________________________________________________________

; Select the buffer window
(defun select-buffer() 
  (interactive)
  (list-buffers))

; Select the buffer window
(defun save-all() 
  (interactive)
  (save-some-buffers 0))

;; Buffer navigation
(global-set-key "\C-w"              'kill-this-buffer)
(global-set-key "\C-s"              'save-all)
(global-set-key "\C-o"              'find-file)
(global-set-key (kbd "M-<right>")   'next-buffer)
(global-set-key (kbd "M-<left>")    'previous-buffer)
(global-set-key (kbd "M-<up>")      'select-buffer)
(global-set-key (kbd "M-<down>")    'delete-other-windows)

;; Jump to line
(global-set-key "\M-j"      'goto-line)

;; Show line/column numbers
(line-number-mode 1)
(column-number-mode 1)

;; Load ispell
(if (file-exists-p "/usr/share/emacs/site-lisp/dictionaries-common/ispell.el")
    (ispell-change-dictionary "american" t))

;; Word count
(defun count-words-buffer ()
  "Count the number of words in the current buffer."
  (interactive)
  (save-excursion
    (let ((count 0))
      (goto-char (point-min))
      (while (< (point) (point-max))
        (forward-word 1)
        (setq count (1+ count)))
      (message "buffer contains %d words." count))))

;; The One True Indent Style
(setq-default c-basic-offset 4)
(setq c-default-style "K&R")

;;________________________________________________________________________________________
;; Editing
;;________________________________________________________________________________________

;; Add new line
(global-set-key "\C-j"      'open-line)
(global-set-key (kbd "C-;") 'delete-indentation)


;; Turn on muse mode for a document
(global-set-key "\C-x\C-m" 'muse-mode)

;; Count words
(global-set-key "\C-c\C-w" 'count-words-buffer)

;; Comment region
;; (global-set-key "\C-c\C-c" 'comment-region)
(global-set-key "\C-x\C-r" 'comment-region)

;; Query replace
(global-set-key "\C-f"          'isearch-forward)
(global-set-key (kbd "C-M-q")   'query-replace)
(global-set-key "\C-x\M-l"      'make-symbolic-link)

;; Turn on auto-fill-mode
(setq default-fill-column 85)
(add-hook 'text-mode-hook 'turn-on-auto-fill)

(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

(setq auto-save-default nil)
(setq make-backup-files nil)

;;________________________________________________________________________________________
;; Custom Vars
;;________________________________________________________________________________________

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(cua-enable-cua-keys t)
 '(cua-mode t nil (cua-base))
 '(inhibit-startup-screen t)
 '(muse-wiki-allow-nonexistent-wikiword t)
 '(muse-wiki-use-wikiword t)
 '(tool-bar-mode nil))
(custom-set-faces)

;;________________________________________________________________________________________
;; Muse
;;________________________________________________________________________________________

;; Setup muse
(setq muse-wiki-allow-nonexistent-wikiword t)
(setq muse-wiki-use-wikiword t)
(require 'muse-wiki)

; Toggle format mode
(global-set-key "\C-y"             'font-lock-mode)

; Open the buffer
(global-set-key (kbd "C-<return>") 'muse-follow-name-at-point)
;;(global-set-key  (kbd "<return>")  'open-line)

; Count the words in the buffer
(global-set-key "\C-c\C-w" 'count-words-buffer)

; Muse bold text
(defun bold-line ()
   (interactive) (beginning-of-line) (insert "**") (end-of-line) (insert "**"))
(global-set-key (kbd "C-b") 'bold-line)

;;________________________________________________________________________________________
;; Shell commands
;;________________________________________________________________________________________

(defun sh()
  (interactive)
  (shell))

(defun seaman-sort()
  (interactive)
  (sort-lines))

; Execute a command as seaman
(defun seaman-do(command)
  (shell-command-to-string  (concat ". ~/bin/bash-vars &&" command)))

; Insert text from running a shell command
(defun shell-text(command)
  (insert (seaman-do command))) 

; Insert text from running a shell command
(defun shell-text-filter(command)
  (let ((b (if mark-active (min (point) (mark)) (point-min)))
        (e (if mark-active (max (point) (mark)) (point-max))))
    (shell-command-on-region b e (concat ". ~/bin/bash-vars &&" command) (current-buffer) t)))


;;________________________________________________________________________________________
;; Brain functions
;;________________________________________________________________________________________

(defun action() 
  (interactive)
  (seaman-do "action"))

;---------

; Prompt for a file to open
(defun be(f)
  (interactive "sBrain topic: ") 
  (find-file (concat "/home/seaman/Documents/Brain/" f)))

; Prompt for a file to open
(defun brain-edit(f)
  (interactive "sBrain topic: ") 
  (find-file (concat "/home/seaman/Documents/Brain/" f)))

; Open a random file
(defun brain-random()
  (interactive) 
  (seaman-do "brain-random"))

; Run dired
(defun brain-dir()
  (interactive (dired "/home/seaman/Documents/Brain/")))

; Read an argmuent from the mini buffer
(defun bs(text)
  (interactive "sSearch for: ")
  (seaman-do (concat "page-search " text " /home/seaman/Documents/Brain")))

; Read an argmuent from the mini buffer
(defun brain-search(text)
  (interactive "sSearch for: ")
  (seaman-do (concat "brain-search " text)))

; Read an argmuent from the mini buffer
(defun bn(text)
  (interactive "sNew topic: ")
  (message (shell-command-to-string  (concat "brain-new " text)))
  (insert text))

;---------

; Edit a command
(defun ce(cmd)
  (interactive "sCommand: ")
  (save-all)
  (seaman-do (concat "cmd-edit " cmd )))

; Create a new command
(defun cn(cmd comment)
  (interactive "sCommand: \nsComment: ")
  (save-all)
  (seaman-do (concat "cmd-new " cmd " '" comment "'")))

; Help with command type
(defun ch(cmd)
  (interactive "sCommand prefix: ")
  (save-all)
  (seaman-do (concat "cmd-help " cmd )))

; Show changes
(defun changes()
   (interactive)
   (save-all)
   (seaman-do "changes"))

; Comment region
(defun comment()
  (interactive)
  (comment-region (mark) (point)))

; Commit all changes
(defun commit()
   (interactive)
   (save-all)
   (seaman-do "commit"))

; Configure emacs
(defun configure-emacs() 
  (interactive)
  (find-file "/home/seaman/bin/emacs.conf"))

;---------

; Read an argmuent from the mini buffer
(defun dn(text)
  (interactive "sNew doc: ")
  (seaman-do  (concat "doc-new " text))
  (insert text))

; Read an argmuent from the mini buffer
(defun dt(text template)
  (interactive "sNew doc: \nsTemplate: " )
  (shell-text  (concat "doc-template " text " " template)))

;---------

; Configure emacs
(defun ebiz() 
  (interactive)
  (find-file "/home/seaman/Documents/MyBook/seaman/BizPlan/Index"))

; Edit a command
(defun ew(cmd)
  (interactive "sCommand: ")
  (save-all)
  (seaman-do (concat "e `which " cmd "`")))

;---------

; Filter a region
(defun figlet-region (&optional b e) 
  (interactive)
  (let ((b (if mark-active (min (point) (mark)) (point-min)))
        (e (if mark-active (max (point) (mark)) (point-max))))
   (shell-command-on-region b e "figlet" (current-buffer) t)
  (comment-region (mark) (point))))
(global-set-key (kbd "C-c C-x") 'figlet-region)

; Filter text to buffer through a shell command
(defun filter(c)
  (interactive "sCommand: ")
  (shell-text-filter c))

(define-key global-map "\C-c\C-k" ' filter)

; Filter text to buffer through a shell command
(defun focus(c)
  (interactive "sRole: ")
  (shell-text (concat "focus " c)))

(define-key global-map "\C-c\C-d" 'focus)

;---------

; Define a horizonal rule
(defun hr() 
  (interactive 
   (insert
    "_____________________________________________________________________________\n")))


;---------

; Capture an idea
(defun idea()
  (interactive 
   (find-file "/home/seaman/Documents/Brain/Ideas")))

; Insert figlet text
(defun insert-banner(s) 
  (interactive "sBanner text: ") (insert (shell-command-to-string (concat "echo " s "|figlet"))))

; Insert a calendar
(defun insert-calendar(m) 
  (interactive "sMonth for calendar: ")
  (insert (shell-command-to-string (concat "cal " m))))

; Insert current date-time string
(defun insert-date ()  
  (interactive) (insert (format-time-string "%Y-%m-%d")))

; Insert time
(defun insert-time ()  
  (interactive) (insert (format-time-string "%T")))


; Income format
(defun income()
  (interactive)
  (shell-text-filter "income"))

; Invoice format
(defun invoice-cne()
  (interactive)
  (shell-text-filter "cat|invoice 90"))

(defun invoice-wm()
  (interactive)
  (shell-text-filter "cat|invoice 75"))

(defun invoice-todd()
  (interactive)
  (shell-text-filter "cat|invoice 30"))

;---------

; Prompt for a file to open
(defun me()
  (interactive) 
  (dired  "/home/seaman/Documents/MyBook/"))

;---------

; Insert a new log entry
(defun new-day() 
  (interactive (insert (concat  (format-time-string "%m-%d") "\n * High:\n * Low:\n\n"))))

; Read an argmuent from the mini buffer
(defun new-topic(text)
  (interactive "sNew topic: ")
  (seaman-do (concat "brain-new " text))
  (insert text))

;---------

; Add page
(defun page()
  (interactive)
  (insert "*  *                                       -*-muse-*-\n\n")
  (previous-line)
  (previous-line)
  (forward-char)
  (forward-char))

; Edit the requested project page
(defun page-project(project)
  (interactive "sProject: ")
  (seaman-do (concat "page-project " project))
  (insert (concat "[[" project "]]")))

; Recent doc updates
(defun pick()
  (interactive)
  (message (seaman-do "brain-random")))

; Edit pipe docs
(defun pipe() 
  (interactive)
  (find-file "/home/seaman/Documents/Brain/AppThumper/planner/PipeScan/Index"))

;---------

; Remove autosave files
(defun rmas()
  (interactive)
  (seaman-do "rmas ~/Documents"))

;---------

; Open a file
(defun sws() 
  (interactive)
  (find-file "/home/seaman/Documents/Brain/AppThumper/planner/SWS/Index"))

;---------

; Insert time spent text
(defun task-day()
  (interactive)
  (insert (seaman-do "task-day")))

; Reformat a task list
(defun task-format()
  (interactive)
  (shell-text-filter "task-format"))

; Reformat a time allocation list
(defun task-alloc()
  (interactive)
  (shell-text-filter "task-alloc"))

; Insert time spent text
(defun task-week()
  (interactive)
  (insert (seaman-do "task-week")))

; Insert time spent text
(defun task-work()
  (interactive)
  (insert (seaman-do "task-work")))

; Insert life notes
(defun task-notes()
  (interactive)
  (insert (seaman-do "task-notes")))

; Insert ta
(defun task-month()
  (interactive)
  (message (seaman-do "task-month")))

; Open a file
(defun todo() 
  (interactive)
  (find-file "/home/seaman/Documents/MyBook/seaman/MyPlan/Index"))

; Edit work time file
(defun time() 
  (interactive)
  (find-file "/home/seaman/Documents/MyBook/seaman/BizPlan/History/Index"))

;---------

; Edit wm
(defun wm() 
  (interactive)
  (find-file "/home/seaman/Documents/MyBook/seaman/BizPlan/Watermill/Index"))

; Edit the work time file
(defun work() 
  (interactive)
  (find-file "/home/seaman/Documents/MyBook/seaman/BizPlan/Index"))

;---------

; Add year text
(defun year()
  (interactive)
  (insert "\n\n**Work**\n\n**Growth**\n\n**People**\n\n**Events**\n\n"))


;-----------------------------------------------------------------------------
; Mark Down
;-----------------------------------------------------------------------------

(autoload 'markdown-mode "markdown-mode" "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(put 'scroll-left 'disabled nil)


;; Average a list of numbers
(defun average(nums)
  (insert " = "
    (number-to-string 
      (/ 
        (eval (cons '+ nums)) 
        (length nums)))))

