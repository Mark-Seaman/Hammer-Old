#!/bin/bash
# Create the control script for this new Django application.

project=$1
appName=$2
className=$3

#########################################################################
echo "Creating the control script for $project.$appName"

cat <<EOF > $project
#!/bin/bash
# $project management script

# Load the data for a single table
function loadData
{
    echo "Save table list.\$1"
    manage.py loaddata data/$project.\$1.json
}

# Save the data from a single table in JSON format
function saveData
{
    echo "Save table $project.\$1"
    manage.py dumpdata --indent=4 $project.\$1 > data/$project.\$1.json
}

#----------------------------------------------------------------
# Web site for the $project
if [ "w" == "\$1" ]
then
    echo "Browse $project"
    web 127.0.0.1:8080/admin
    exit 0
fi

#----------------------------------------------------------------
# Start the process for the $project
if [ "start" == "\$1" ]
then
    echo "Starting $project"
    nohup manage.py runserver 0.0.0.0:8080 &> /tmp/$project.log &
    ps -ef|grep manage.py|grep -v grep|head -1
    echo "To view the pages"
    echo "w 127.0.0.1:8080/admin"
    exit 0
fi

#----------------------------------------------------------------
# Stop the process for the $project
if [ "stop" == "\$1" ]
then
    echo "Stopping $project"
    p=\`ps -ef|grep manage.py|grep -v grep|awk '{print \$2;}'\` 
    echo \$p
    kill \$p
    exit 0
fi

#----------------------------------------------------------------
# Start the process for the $project
if [ "restart" == "\$1" ]
then
    $project stop
    rm *.pyc */*.pyc
    $project start
    exit 0
fi

#----------------------------------------------------------------
# Show the last few lines of the log for the $project
if [ "log" == "\$1" ]
then
    echo "$project Log"
    tail -30 /tmp/$project.log
    exit 0
fi

#----------------------------------------------------------------
# Show the process status for the $project
if [ "status" == "\$1" ]
then
    echo "$project Processes"
    ps -ef|grep manage.py|grep -v grep
    exit 0
fi

#----------------------------------------------------------------
# Save the data table for the $project in JSON format
if [ "save" == "\$1" ]
then
    echo "Save $project Data"
    manage.py dumpdata --indent=4 > data/all.json
    saveData topic
    #saveData reference
    exit 0
fi

#----------------------------------------------------------------
# Load the data tables for the $project in JSON format
if [ "clear" == "\$1" ]
then
    echo "Clear $project Data"
    rm $project
    manage.py syncdb
    exit 0
fi

#----------------------------------------------------------------
# Load the data tables for the $project in JSON format
if [ "load" == "\$1" ]
then
    echo "Load $project Data"
    manage.py syncdb
    loadData  topic
    #loadData  reference
    exit 0
fi

#----------------------------------------------------------------
# Show how to use the $project script
echo "usage: $project option"
echo "where option is:"
echo "  help"
echo "  w"
echo "  start"
echo "  stop"
echo "  log"
echo "  status"
echo "  load"
echo "  save"
echo "  clear"
EOF

chmod 755 $project

e $project

#########################################################################
echo "Creating the settings.py script for $project"

cat <<EOF > settings.py
# Django settings for $project project.

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
  #  ('Mark Seaman', 'mark.seaman@shrinking-world.com'),
)

MANAGERS = ADMINS
DATABASE_ENGINE = "sqlite3"
DATABASE_NAME = '$project.db'
DATABASE_USER = ''             # Not used with sqlite3.
DATABASE_PASSWORD = ''         # Not used with sqlite3.
DATABASE_HOST = ''             # Set to empty string for localhost. Not used with sqlite3.
DATABASE_PORT = ''             # Set to empty string for default. Not used with sqlite3.

TIME_ZONE = 'America/Denver'

LANGUAGE_CODE = 'en-us'

SITE_ID = 1
USE_I18N = True
MEDIA_ROOT = ''
MEDIA_URL = ''
ADMIN_MEDIA_PREFIX = '/media/'
SECRET_KEY = '*fe36zqt3ehkm1$dvhfu*00v$um)rgb*^#ga3zuo=5k4rxev5_'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.load_template_source',
    'django.template.loaders.app_directories.load_template_source',
#     'django.template.loaders.eggs.load_template_source',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
)

ROOT_URLCONF = 'gallery.urls'

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Don't forget to use absolute paths, not relative paths.
)

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.admin',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    '$project.$appName',
)
EOF

e settings.py

#########################################################################
echo "Creating the urls.py script for $project"

cat <<EOF > urls.py
from django.conf.urls.defaults import *
from django.contrib import admin

admin.autodiscover()

urlpatterns = patterns('',
    (r'^admin/', include(admin.site.urls)),
)
EOF

e urls.py

#########################################################################
echo "Creating $className within $appName/models.py for $project"

cat <<EOF > ${appName}/models.py
from django.db import models
from django.contrib import admin
    
class $className (models.Model):
    class Meta:
        ordering = ('-timestamp',)
    title = models.CharField( max_length=150)
    body = models.TextField()
    timestamp = models. DateTimeField()

class ${className}Admin(admin.ModelAdmin):
    ${appName}_display = ('title')

admin.site.register(${className}, ${className}Admin)
EOF

e $appName/models.py

