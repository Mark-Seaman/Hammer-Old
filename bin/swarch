#!/bin/bash
# Reset the command environment
echo Reset the command environment

unalias  show
unalias  l

function d { cd $p; }

export p=~/swarch
export PATH=$p/bin:$p/test:$PATH

function make-sample-files
{
    mkdir -p $p/test/data
    cd $p/test/data
    
    cat <<EOF > Domain_Map.txt
    Have a preferred tool for each situation
     * Deal with files or computer control  -- bash
     * Work with individual file contents   -- python
     * Work with data interchange           -- xml
     * Web pages and data                   -- Django
     * Web page content                     -- HTML, CSS
     * Data storage and manipulation        -- MySQL
     * Real-time control system             -- C++
     * Fancy client apps                    -- Qt
     * Integrating with a Java system       -- Java
     * Integrating .Net components          -- .Net
     * Integrating PHP                      -- PHP
EOF
 

    cat <<EOF > SlideSlingerProject.txt
    Slide Slinger Project
    ---------------------
    Convert from text format to HTML presentation
    Range of features that go beyond the trivial
    Illustrates concepts and tricks
EOF
    

    cat <<EOF > Requirements.txt
    Slide Slinger
    -------------
    Implementation requirements
     * Use Reveal.js
     * Read standard text file
     * Output context for existing Java Script presentation engine
     * Use Four-stroke Development
EOF
    ls; echo; cat  *.txt
}

function copy-testing-commands
{
    cp $b/te bin              # Test edit
    cp $b/test-filter bin     # Filter the results
    cp $b/tfail bin           # List the failed tests
    cp $b/tlike bin           # Accept the currect results as the correct answer
    cp $b/tnew  bin
    cp $b/tout  bin          # Show the results from the test that was run
    cp $b/tproject bin        # Setup the project context
    cp $b/tresults bin       # Compare the last output with the correct output
    cp $b/trun   bin         # Run a single test case for the copy program
    cp $b/tshow  bin         # Show the test code
    cp $b/tst   bin          # Run all system tests
}


function dead-code
{
    # Create a failing test (output must match input)
    sling < Requirements.txt > x
    diff x Requirements.txt

    # Capture test for later
    exe tst-case 'cat $1.txt | sling > x && diff x $1.txt' 
    
    # Run the tests
    trun  Requirements
    trun  Domain_Map
    trun  SlideSlingerProject

#**Check results in test**

    # Move testing files into test directory
    mkdir -p test && mv *.txt test && ls . test
    
    # Compare results in tst command
    exe tst-case 'cd test && sling < $1.txt > $1.out && diff $1.out $1.correct'
    tst-case Requirements     # No correct file

#**Accept the results as new answer**

    # Show me the output file
    exe see 'cd test && cat $1.out' 

    # Create command to accept
    exe like 'cd test && cp $1.out $1.correct' 

    # Accept the new test results as correct
    see  Requirements
    like Requirements
    tst-case Requirements     # Test passes

#**Collection of test cases**

    # Create command to run all tests available
    cat <<EOF > tst
    #!/bin/bash
    cd test
    ls *.txt | while read f
    do
        tst-case \${f/.txt/}
    done
EOF

    # Run all tests
    tst

    # Commit all changes
    s-changes && s-commit

#**Test corrupted results**

    # Create command to corrupt the test
    exe corrupt 'cd test && echo "CORRUPT" >> $1.correct && sed '3d' $1.correct>x && mv x $1.correct' 

    # See if we can catch corruption
    corrupt Requirements
    tst

#**Test the product story**

    cat <<EOF >> tst

    ls *.tst | while read f
    do
        tst-case \${f/.tst/}
    done
EOF

    # Create a new test to list all of the tests
    exe ../test/list-test.tst 'ls'
    list-test.tst

    # Run test (no input)
    sling < /dev/null
    
    # Create new test and run it
    exe test/no-input.tst 'sling < /dev/null' 
}

alias s1='swarch-step 1'
alias s2='swarch-step 2'
alias s3='swarch-step 3'
alias s4='swarch-step 4'
alias s5='swarch-step 5'
alias s6='swarch-step 6'
alias s7='swarch-step 7'
alias s8='swarch-step 8'
alias s9='swarch-step 9'
alias s10='swarch-step 10'
alias s11='swarch-step 11'
alias s12='swarch-step 12'
alias s13='swarch-step 13'
alias s14='swarch-step 14'
alias s15='swarch-step 15'
alias s16='swarch-step 16'
alias s17='swarch-step 17'
alias s18='swarch-step 18'
alias s19='swarch-step 19'
alias s20='swarch-step 20'
alias s21='swarch-step 21'
alias s22='swarch-step 22'
